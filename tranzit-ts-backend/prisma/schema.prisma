// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

enum Role {
  USER
  ADMIN
}

model Stop {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  routeStops RouteStop[]
  fromTickets Ticket[] @relation("FromStop")
  toTickets   Ticket[] @relation("ToStop")
}

model Route {
  id         Int         @id @default(autoincrement())
  name       String
  transport  TransportType
  routeStops RouteStop[]
  vehicles   Vehicle[]
}

model RouteStop {
  id      Int   @id @default(autoincrement())
  routeId Int
  stopId  Int
  order   Int
  route   Route @relation(fields: [routeId], references: [id])
  stop    Stop  @relation(fields: [stopId], references: [id])
}

enum RouteDirection {
  FORWARD
  REVERSE
}

model Vehicle {
  id        Int      @id @default(autoincrement())
  vehicleId String   @unique
  routeId   Int
  departure DateTime
  arrival   DateTime
  price     Float
  direction RouteDirection @default(FORWARD)
  route     Route    @relation(fields: [routeId], references: [id])
  tickets   Ticket[]
}

model Ticket {
  id         Int          @id @default(autoincrement())
  userId     String
  vehicleId  Int
  fromStopId Int
  toStopId   Int
  status     TicketStatus @default(BOOKED)
  qrCode     String
  createdAt  DateTime     @default(now())

  user     User    @relation(fields: [userId], references: [id])
  vehicle  Vehicle @relation(fields: [vehicleId], references: [id])
  fromStop Stop    @relation("FromStop", fields: [fromStopId], references: [id])
  toStop   Stop    @relation("ToStop", fields: [toStopId], references: [id])
}

enum TransportType {
  METRO
  MTC
}

enum TicketStatus {
  BOOKED
  CHECKED_IN
  CHECKED_OUT
}